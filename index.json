{
  "api/index.html": {
    "href": "api/index.html",
    "title": "API | Sentry .NET",
    "keywords": "API Welcome to the API documentation of the Sentry .NET SDK. Acquisition This documentation include types which are part of different NuGet packages provided by Sentry . When visualizing a type, the documentation includes the name of the Assembly which contains that type. Assembly names are equal to the NuGet package that contains the assembly. For example, the @Sentry.Dsn class mentions: Assembly: Sentry.dll This means the type resides in the NuGet package Sentry Looking at @Sentry.Extensions.Logging.SentryLoggerProvider you'll notice: Assembly: Sentry.Extensions.Logging.dll That assembly is found on NuGet Sentry.Extensions.Logging"
  },
  "index.html": {
    "href": "index.html",
    "title": "Sentry for .NET | Sentry .NET",
    "keywords": "Sentry for .NET This documentation will help you get started with integrating Sentry with your .NET application. Refer to the manual to get started and learn about concepts. The reference API documentation includes any public member of this SDK. Many of which include useful see also sections and links to external documentation, for example, on sentry.io . Want to see some actual code? The SDK is developed on GitHub . Feedback We'd love to hear your feedback. You can also engage with us via the following channels:"
  },
  "manual/getting-started.html": {
    "href": "manual/getting-started.html",
    "title": "Getting started | Sentry .NET",
    "keywords": "Getting started It's possible to simply import a single NuGet package and integrate Sentry with pretty much any .NET application. That is not necessarily the easiest way. Sentry provides multiple integrations , for specific types of applications. It's advised to look for an integration that best fits your application. Main concepts: Sentry Client The @Sentry.SentryClient is used to send events to Sentry. It has only synchronous methods because all its operations are executed in the calling thread without any I/O operation. Calling @Sentry.SentrySdk.CaptureException(Exception) will create a @Sentry.SentryEvent from the Exception provided. Internally, @Sentry.ISentryClient.CaptureEvent(Sentry.SentryEvent,Sentry.Protocol.Scope) is then called. Calling @Sentry.ISentryClient.CaptureEvent(Sentry.SentryEvent,Sentry.Protocol.Scope) will prepare the @Sentry.SentryEvent, applying the current @Sentry.Protocol.Scope data to it if one exists. If any @Sentry.Extensibility.ISentryEventProcessor or @Sentry.Extensibility.ISentryEventExceptionProcessor was configured by you, those are invoked too. Finally, the event is put into a in-memory queue to be sent to Sentry. Scope management By default, any call to AddBreadcrumb or ConfigureScope will access the same shared scope throughout the app. Perhaps that is what you need, for example on a WPF, WinForms or Xamarin app where a single user is using it. Or maybe you are building a ASP.NET application in which case you would prefer to create a new scope per request , ensuring that data in any single scope relates to a single request. The scope feature is leveraged by the ASP.NET Core integration for exactly this reason. It isolates data from each request so in case an event happens, only relevant data is sent to Sentry. This means you don't need to dig through logs with correlation ids in order to find the data relevant to you. Please check the manual for more."
  },
  "manual/log4net.html": {
    "href": "manual/log4net.html",
    "title": "Installing the integration on your app | Sentry .NET",
    "keywords": "Installing the integration on your app Using NuGet: Install-Package Sentry.Log4Net Or using the .NET Core CLI: dotnet add Sentry.Log4Net Configuration Once the log4net integration package is installed on your project, you can modify your configuration file to add the appender. This can be done, for example, via the app.config or web.config in case of ASP.NET. <appender name=\"SentryAppender\" type=\"Sentry.Log4Net.SentryAppender, Sentry.Log4Net\"> <Dsn value=\"dsn\"/> <!--Sends the log event Identity value as the user--> <SendIdentity value=\"true\" /> <Environment value=\"dev\" /> <threshold value=\"INFO\" /> </appender> For how it's done in this sample, please refer to sample app.config . The example above defines the DSN so that the SentryAppender is able to initialize the SDK. This is only one of the options. If you wish to configure the SDK manually in the app before creating the logging integration, you could leave the DSN out of the log4net configuration file and call: SentrySdk.Init(\"DSN\"); One of the advantages of this approach is that you can pass multiple configurations via the Init method. Bottom line is that the SDK needs to be initialized only once so you can choose where the initialization will happen. Other integrations (like ASP.NET) also is able to initialize the SDK. Make sure you pass the DSN to only one of these integrations, or if you are calling Init by yourself, there's no need to pass the DSN to the integration. Please refer to the sample to see it in action."
  },
  "manual/manual.html": {
    "href": "manual/manual.html",
    "title": "Manual | Sentry .NET",
    "keywords": "Manual Besides the examples documented here, you can refer to samples on GitHub . These are complete samples which you can run with a debugger to see how the SDK works. Static use The SDK provides a static entry point class called @Sentry.SentrySdk. Initialize the SDK @SentrySdk.Init Once the SDK is initialized, unhandled exceptions will automatically be captured and sent to Sentry. More context can be added, for example, breadcrumbs: SentrySdk.AddBreadcrumb(\"User accepted TOC\"); By default, the last 100 breadcrumbs are kept. This is configurable alongside many other settings via a parameter to the Init method. Breadcrumbs are attached to the scope. See further to understand Scopes. Scope management The scope is a lightweight object that exists in memory since the SDK is initialized. It can be used to augment events sent to Sentry. When the SDK is initialized, an empty Scope is already put in memory. That can be modified by you so that any event sent, regardless from where they are sent (e.g: a Logger integration that you configured) will include that scope data. You can create new scopes, which will clone the previous but will be totally isolated from it. The scope can be configured through: SentrySdk.ConfigureScope(scope => { scope.SetTag(\"Example\", \"Sentry docs\"); } There's also an asynchronous version if you need to do some I/O or run other TPL based work in order to retrieve the value to modify the scope: await SentrySdk.ConfigureScopeAsync(async scope => { // Anonymous object containing user retrieved from the DB scope.SetExtra(\"SomeExtraInfo\", new { Data = \"Value fetched asynchronously\", User = await _repository.GetUserId(id); }); }); ConfigureScope and ConfigureScopeAsync can be called as many times as you need. It'll invoke your callback with the current scope, allowing you to modify it further. To push a new scope into the stack and isolate any modifications from other scope, you can call: PushScope and call Dispose to drop it. using (SentrySdk.PushScope()) { SentrySdk.ConfigureScope(s => s.User = new User(\"name\")); Work(); // If an event happens inside this method, the user set above is sent with it. } // Disposed the scope above, User is no longer in the scope! Release The Sentry release feature (see Sentry docs to learn about it ) requires the SDK to send the actual application release number. That is done via the SentryEvent property called Release . Automatically discovering release version The SDK attempts to locate the release and add that to every event sent out to Sentry. Default values like 1.0 or 1.0.0.0 are ignored . It will firstly look at the entry assembly's AssemblyInformationalVersionAttribute , which accepts a string as value as is often used to set the GIT commit hash. If that returns null, it'll look at the default AssemblyVersionAttribute which accepts the numeric version number. When creating a project with Visual Studio, usually that includes version 1.0.0.0 . Since that usually means that the version is either not being set, or is set via a different method. The automatic version detection will disregard this value and no Release will be reported automatically."
  },
  "manual/testing.html": {
    "href": "manual/testing.html",
    "title": "| Sentry .NET",
    "keywords": "We often don't want to couple our code with static class like SentrySdk , especially to allow our code to be testable. If that's your case, you can use 2 abstractions: @Sentry.ISentryClient @Sentry.IHub The @Sentry.ISentryClient is responsible to queueing the event to be sent to Sentry and abstracting away the internal transport. The @Sentry.IHub on the other hand, holds a client and the current scope. It in fact also implements @Sentry.ISentryClient and is able to dispatch calls to the right client depending on the current scope. In order to allow different events hold different contextual data, you need to know in which scope you are in. That's the job of the Hub . It holds the scope management as well as a client. If all you are doing is sending events, without modification/access to the current scope, then you depend on @Sentry.ISentryClient. If on the other hand you would like to have access to the current scope by configuring it or binding a different client to it, etc. You'd depend on IHub . An example using IHub for testability is SentryLogger and its unit tests SentryLoggerTests . SentryLogger depends on IHub because it does modify the scope (through AddBreadcrumb ). In case it only sent events, it should instead depend on ISentryClient"
  }
}